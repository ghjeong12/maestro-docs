.. _Getting Started:

===============
Getting Started
===============

.. _Mapping Definition:

Mapping Definition
------------------

A mapping is a Maestro input file which contains a DNN model and the dataflow for each layer.

.. code-block:: none

	Network MobileNetV2 {
        Layer CONV1 {
                Type: CONV
                Stride { X: 2, Y: 2 }
                Dimensions { K: 32, C: 3, R: 1, S: 1, Y:224, X:224 }
                Dataflow {
                        SpatialMap(1,1) K;
                        TemporalMap(64,64) C;
                        TemporalMap(Sz(R),Sz(R)) R;
                        TemporalMap(Sz(S),Sz(S)) S;
                        TemporalMap(Sz(R),1) Y;
                        TemporalMap(Sz(S),1) X;
                        Cluster(64, P);
                        SpatialMap(1,1) C;
                        TemporalMap(Sz(R),1) Y;
                        TemporalMap(Sz(S),1) X;
                        TemporalMap(Sz(R),Sz(R)) R;
                        TemporalMap(Sz(S),Sz(S)) S;
                }
        }
		

	
Network MobileNetV2 ---> **DNN MODEL NAME**


Layer CONV1 ---> **LAYER NAME**


Type: CONV ---> **TYPE OF CONVOLUTION**


Dimensions { K: 32, C: 3, R: 1, S: 1, Y:224, X:224 } ---> **LAYER DIMENSIONS**


Dataflow ---> **DATAFLOW FOR THE LAYER IN MAESTRO COMPILER DIRECTIVES**


.. _How to generate a Mapping:

How to generate a Mapping
--------------------------

This tutorial is written to provide an easy way to generate a mapping from a PyTorch/Keras model.

1. :ref:`Generate a Maestro DNN Model file from a Pytorch/Keras model`
2. :ref:`Generate a Maestro Mapping file with the Maestro DNN Model file and specific dataflow`
3. :ref:`Run Maestro with the generated mapping`




.. _Generate a Maestro DNN Model file from a Pytorch/Keras model:

Generate a Maestro DNN Model file from a Pytorch/Keras model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: bash

   cd tools/frontend
   
Check the messages from the help for the future reference

.. code:: bash

	python frameworks_to_modelfile_maestro.py --help
	
.. code:: bash

	python frameworks_to_modelfile_maestro.py --api_name pytorch --input_size 3,224,224 --model mobilenet_v2 --outfile dnn_model.m
	
.. code-block:: none

	--api_name: the API name, choose from "pytorch, keras"

	--input_size: the input image size of the first layer

	--model: the model name from torchvision.models (or tensorflow.keras.applications)
         TO use a custom model, enter custom for this argument.

	--custom: Enter the custom network python file name here. 
          The file should have a function whose name is same as the file name and returns the model.
          (This option is working only for keras now)
          
	--outfile: the MAESTRO model output file name
	
	
The Maestro DNN Model, dnn_model.m, will be generated in ../../data/model




.. _Generate a Maestro Mapping file with the Maestro DNN Model file and specific dataflow:

Generate a Maestro Mapping file with the Maestro DNN Model file and specific dataflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Check the messages from the help for the future reference

.. code:: bash

	python modelfile_to_mapping.py --help
	python modelfile_to_mapping.py --model_file dnn_model.m --dataflow os --outfile out.m

.. code-block:: none

	--model_file: The model file supported by maestro as specified by the user or generated by the above given script.

	--dataflow: the dataflow for each layer, choose from "os, ws, rs, dla"
          
	--outfile: the MAESTRO DFSL output file

The mapping file, out.m, will be generated in ../../data/mapping



.. _Run Maestro with the generated mapping:

Run Maestro with the generated mapping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Go back to the maestro-dev directory

.. code:: bash

	cd ../../
	
Change the contents of "run.sh" to use the mapping file generated

.. code-block:: none
		
	--DFSL_file='data/mapping/out.m'
	
Run MAESTRO

.. code:: bash

	./run.sh